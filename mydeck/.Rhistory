summarise(sum_imp_req =  sum(sum_imp_req),
sum_imp = sum(sum_imp),
sum_vimp = sum(sum_vimp),
sum_clicks = sum(sum_clicks),
sum_video_plays = sum(sum_video_plays),
sum_price = sum(sum_price),
sum_total_engagements = sum(sum_total_engagements),
sum_shares = sum(sum_shares)) %>%
mutate(ctr = (sum_clicks/sum_vimp) * 100 )
head(data)
str(data)
with(data, summary(ctr))
breaks = seq(0, 350, by = 50)
cut = cut(data$ctr, breaks, right = FALSE)
freq = table(cut)
print(freq)
data %>% filter(ctr > 100) %>%  count()
data %>% ungroup() %>% filter(ctr > 100) %>% arrange(ctr)
data %>% ungroup() %>% arrange(desc(ctr)) %>%  top_n(n = 10) %>% select(creative_key, placement_key)
install.packages("rvest")
library(rvest)
amp <- html("http://www.medschat.com/Discuss/actavis-amphetamine-282186.htm")
install.packages("caret")
library(caret)
?train
?downSample
?RMySql
??RMySql
database <- function(dbname){
if (dbname == "harpoon")
{
con <- dbConnect(RMySQL::MySQL(),
username = "sharethrough",
password = "Ja2gLD9KcjFDgxm",
host = "harpoon-readreplica-ssd.coh6okp5xykg.us-east-1.rds.amazonaws.com",
port = 3306,
dbname = "harpoon_production")
} else if (dbname == "bakery")
{
con <-  dbConnect(RMySQL::MySQL(),
username = "sharethrough",
password = "todtakduidjuwr",
host = "bakery-production-readreplica.coh6okp5xykg.us-east-1.rds.amazonaws.com",
port = 3306,
dbname = "bakery_production")
}
#invisible(TRUE)
return(con)
}
get_pub_data <- function(pub_data){
# Connect to Bakery
bakery <- database("bakery")
pub_data <- dbGetQuery(bakery,
"SELECT placements.id AS placement_id, placements.key AS placement_key, placements.name AS placement_name, placements.publisher_id, placements.status, placements.location_type, placements.price,
publishers.id, publishers.name, publishers.key
FROM placements
LEFT JOIN publishers
ON placements.publisher_id = publishers.id")
invisible(pub_data)
}
library(caret)
data(GermanCredit)
Train <- createDataPartition(GermanCredit$Class, p=0.6, list=FALSE)
training <- GermanCredit[ Train, ]
testing <- GermanCredit[ -Train, ]
mod_fit_one <- glm(Class ~ Age + ForeignWorker + Property.RealEstate + Housing.Own +
CreditHistory.Critical, data=training, family="binomial")
mod_fit_two <- glm(Class ~ Age + ForeignWorker, data=training, family="binomial")
library(lmtest)
lrtest(mod_fit_one, mod_fit_two)
library(pscl)
install.packages(pscl)
install.packages("pscl")
library(pscl)
pR2(mod_fit_one)  # look for 'McFadden'
library(MKmisc)
install.packages("MKmisc")
library(MKmisc)
HLgof.test(fit = fitted(mod_fit_one), obs = training$Class)
install.packages("ResourceSelection")
library(ResourceSelection)
hoslem.test(training$Class, fitted(mod_fit_one), g=10)
library(survey)
varImp(mod_fit)
data_frame(x = 1:3, y = letters[x], z = factor(y))
install.packages(c("car", "data.table", "devtools", "dplyr", "evaluate", "formatR", "h2o", "highr", "jsonlite", "mime", "quantreg", "Rcpp", "RcppArmadillo", "RMySQL", "tidyr", "xml2"))
install.packages(c("car", "data.table", "devtools", "dplyr",
install.packages(c("car", "data.table", "devtools", "dplyr", "evaluate", "formatR", "h2o", "highr", "jsonlite", "mime", "quantreg", "Rcpp", "RcppArmadillo", "RMySQL", "tidyr", "xml2"))
install.packages(c("car", "data.table", "devtools", "dplyr",
install.packages(c("car", "data.table", "devtools", "dplyr", "evaluate", "formatR", "h2o", "highr", "jsonlite", "mime", "quantreg", "Rcpp", "RcppArmadillo", "RMySQL", "tidyr", "xml2"))
install.packages(c("car", "data.table", "devtools", "dplyr",
install.packages("car")
install.packages(c("data.table", "devtools", "dplyr"))
install.packages(c("evaluate", "formatR"))
install.packages(c("highr", "jsonlite", "mime", "quantreg"))
install.packages(c("Rcpp", "RcppArmadillo", "RMySQL", "tidyr", "xml2"))
install.packages(c("Rcpp", "RcppArmadillo", "RMySQL", "tidyr",
install.packages("tidyr")
install.packages("xml2")
install.packages("RcppArmadillo")
data_frame(x = 1:3, y = letters[x], z = factor(y))
library(dplyr)
data_frame(x = 1:3, y = letters[x], z = factor(y))
a <- data_frame(x = 1, y = "a")
b <- data_frame(x = 2, y = "c")
a
b
bind_rows(a = a, b = b)
install.packages("h2o")
install.packages("h2o")
install.packages("h2o")
install.packages("h2o")
install.packages(c("Hmisc", "Rcpp", "RcppEigen", "RMySQL", "rvest"))
install.packages("RMySQL")
library(h2o)
localH2O <- h2o.init(nthreads = -1, max_mem_size = "8G")  #num threads == num cores
header <- c("date", "hour", "placementKey", "creativeKey",
"os", "browser", "deviceCategory",
"countryCode", "auctionType", "engagement")
dir <- "/Users/gabrieladequeiroz/Data/str-data-science/data-sample/data-sample-ten-percent/"
path <- paste0(dir,"no_creative-key_no_demokey_no_RTB_sample_ten_percent_201509_17_to_23.csv" )
data <- h2o.importFile(path, col.names = header)
data$dayOfWeek <- h2o.dayOfWeek(data$date)
# Change the vars to be factor
data$hour       <- as.factor(data$hour)
data$engagement <- as.factor(data$engagement)
df <- h2o.removeVecs(data, c("date"))
dim(df)
subset_sample <- subset(df, !is.na(df$placementKey))
summary(subset_sample)
dim(subset_sample)
y <- "engagement"
x <- c("hour", "placementKey", "creativeKey",
"os", "browser", "deviceCategory", "countryCode",
"auctionType", "dayOfWeek")
rand_vec <- h2o.runif(sample)
rand_vec <- h2o.runif(sample)
h2o.runif(10)
rand_vec <- h2o.runif(sample)
exit()
library(h2o)
localH2O <- h2o.init(nthreads = -1, max_mem_size = "8G")  #num threads == num cores
dir <- "/Users/gabrieladequeiroz/Data/str-data-science/data-sample/data-sample-ten-percent/scripts/"
path <- paste0(dir,"clean_sample_ten_percent_201509_16_to_28.csv" )
data <- h2o.importFile(path, destination_frame = "test.hex")
getwd()
?file.path
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
library(slidify)
author('mydeck')
slidify('index.Rmd')
source('~/.active-rstudio-document', echo=TRUE)
pew
library(dplyr)
library(tidyr)
pew <- tbl_df(read.csv("pew.csv",
stringsAsFactors = FALSE,
check.names = FALSE))
pew #This data set has 3 variables: religion, income and frequency
dim(pew)
pew <- read.csv("pew.csv",
stringsAsFactors = FALSE,
check.names = FALSE)
pew #This data set has 3 variables: religion, income and frequency
rm(ls=ls())
rm(ls())
rm(ls = ls())
?rm
rm(list=ls())
library(dplyr)
library(tidyr)
pew <- tbl_df(read.csv("pew.csv",
stringsAsFactors = FALSE,
check.names = FALSE))
pew #This data set has 3 variables: religion, income and frequency
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
glimpse(pew)
pew
pew_tidy <- pew %>%
gather(key = income, value = frequency, -religion)
warnings()
pew_tidy
slidify("index.Rmd")
view_deck()
slidify("index.Rmd")
slidify("index.Rmd")
view_deck()
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
view_deck()
slidify("index.Rmd")
view_deck()
slidify("index.Rmd")
view_deck()
?filter
filter(new_pew, religion == "Jewish")
new_pew <- tbl_df(pew_tidy)
new_pew
filter(new_pew, religion == "Jewish")
select(new_pew, religion)
count(new_pew, religion)
transmute(new_pew, percentage = frequency/sum(frequency))
transmute(new_pew, percentage = (frequency/sum(frequency))*100)
mutate(new_pew, percentage = (frequency/sum(frequency))*100)
group_by(new_pew, religion)
group_by(new_pew, income)
billboard <- tbl_df(read.csv("billboard.csv", stringsAsFactors = FALSE))
billboard
billboard2 <- billboard %>%
gather(week, rank, wk1:wk76, na.rm = TRUE)
billboard2
mutate(week = extract_numeric(week),
date = as.Date(date.entered) + 7 * (week - 1)) %>%
select(-date.entered)
billboard3
billboard2
billboard3
library(nycflights13)
dim(fligths)
dim(flights)
head(flights)
write.csv(flights, "flights.csv", row.names = FALSE)
?flights
fligths <- tbl_df(read.csv("flights.csv", stringsAsFactors = FALSE))
flights
filter(flights, month == 2, day == 1)
fligths <- tbl_df(read.csv("flights.csv", stringsAsFactors = FALSE))
getwd()
flights %>%
filter(month == 2, day == 1)
flights %>%
arrange(arr_delay)
flights %>%
arrange(arr_delay)
flights %>%
group_by(tailnum) %>%
summarise(count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE))
flights %>%
group_by(tailnum) %>%
summarise(count = n())
flights %>%
group_by(carriers) %>%
summarise(count = n())
flights %>%
group_by(carrier) %>%
summarise(count = n())
flights %>%
group_by(carrier) %>%
summarise(count = n()) %>%
arrange(count)
flights %>%
group_by(carrier) %>%
summarise(count = n()) %>%
arrange(count) %>%
summarise(dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE))
flights %>%
group_by(carrier) %>%
summarise(dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE))
flights
filter(flights, carrier == "UA")
?select
select(flights, starts_with("d"))
count(flights, dest)
group_by(fligths, carrier)
group_by(fligths, month)
group_by(fligths, carrier)
ggplot(data = surveys_complete, aes(x = dep_delay, y = arr_delay)) +
geom_point()
ggplot(data = fligths, aes(x = dist, y = hindfoot_length)) +
geom_point()
ggplot(data = surveys_complete, aes(x = dep_delay, y = arr_delay)) +
geom_point()
ggplot(data = flights, aes(x = dep_delay, y = arr_delay)) +
geom_point()
summary(flights)
ggplot(data = flights, aes(x = dep_delay, y = arr_delay)) +
geom_point(alpha = 0.1, na.rm = TRUE)
ggplot(data = flights, aes(x = dep_delay, y = arr_delay)) +
geom_point(alpha = 0.1, na.rm = TRUE)
ggplot(data = flights, aes(x = dep_delay, y = arr_delay)) +
geom_point(alpha = 0.1, color = "blue", na.rm = FALSE)
ggplot(data = flights, aes(x = dep_delay, y = arr_delay)) +
geom_point(alpha = 0.1, na.rm = TRUE)
ggplot(data = flights, aes(x = dep_delay, y = arr_delay)) +
geom_point(alpha = 0.1, color = "blue", na.rm = TRUE)
ggplot(data = flights, aes(x = carrier, y = dep_delay)) +
geom_boxplot()
ggplot(data = flights, aes(x = carrier, y = arr_delay)) +
geom_boxplot()
ggplot(data = flights, aes(x = carrier, y = distance)) +
geom_boxplot()
ggplot(data = flights, aes(x = carrier, y = dep_delay)) +
geom_boxplot()
ggplot(data = flights, aes(x = carrier, y = dep_delay)) +
geom_boxplot(na.rm = FALSE)
flights
ggplot(data = flights, aes(x = carrier, y = air_time)) +
geom_boxplot(na.rm = FALSE)
ggplot(data = flights, aes(x = origin, y = dep_delay)) +
geom_boxplot(na.rm = FALSE)
ggplot(data = flights, aes(x = dest, y = dep_delay)) +
geom_boxplot(na.rm = FALSE)
ggplot(data = flights, aes(x = carrier, y = dep_delay)) +
geom_boxplot(na.rm = FALSE)
ggplot(data = flights, aes(x = carrier, y = dep_delay)) +
geom_boxplot(na.rm = TRUE)
ggplot(data = flights, aes(x = carrier, y = dep_delay)) +
geom_jitter(alpha = 0.3, color = "tomato") +
geom_boxplot(alpha = 0)
new <- flights %>%
group_by(month, origin) %>%
summarize(delay=mean(arrdelay))
new <- flights %>%
group_by(month, origin) %>%
summarize(delay = mean(arr_delay))
new
ggplot(data = new, aes(month, delay, fill=origin)) +
geom_bar(stat="identity", position="dodge")
ggplot(data = new, aes( x = month, y = delay, fill = origin)) +
geom_bar()
ggplot(data = new, aes( x = month, y = delay, fill = origin)) +
geom_bar(stat = "identity")
class(new)
class(flights)
new
flights
new <- flights %>%
group_by(month, origin) %>%
summarize(delay = mean(arr_delay, na.rm = TRUE))
ggplot(data = new, aes( x = month, y = delay, fill = origin)) +
geom_bar(stat = "identity")
ggplot(data = new, aes( x = month, y = delay, fill = origin)) +
geom_bar(stat = "identity", position="dodge")
ggplot(data = new, aes( x = carrier, y = delay, fill = origin)) +
geom_bar(stat = "identity", position="dodge")
new <- flights %>%
group_by(carrier, origin) %>%
summarize(delay = mean(arr_delay, na.rm = TRUE))
ggplot(data = new, aes( x = carrier, y = delay, fill = origin)) +
geom_bar(stat = "identity", position="dodge")
new <- flights %>%
group_by(carrier, origin) %>%
summarize(delay = mean(arr_delay, na.rm = TRUE))
ggplot(data = new, aes( x = carrier, y = delay, fill = origin)) +
geom_bar(stat = "identity", position = "dodge")
?geom_bar
new
ggplot(data = flights, aes(x = carrier)) +
geom_bar(stat = "bin")
flights %>%
group_by(day, carrier) %>%
tally
flights %>%
group_by(origin, carrier) %>%
tally
flights %>%
group_by(day, carrier)
?tally
flights %>%
group_by(day, carrier) %>%
summarize(n = count())
?summarise
flights %>%
group_by(day, carrier) %>%
summarize(n())
``
flights %>%
group_by(carrier) %>%
summarize(n())
ggplot(data = flights, aes(x = carrier, y = dep_delay)) +
geom_line() +
facet_wrap(~carrier)
names(flights)
ggplot(data = flights, aes(x = arr_delay, y = dep_delay)) +
geom_line() +
facet_wrap(~carrier)
ggplot(data = flights, aes(x = carrier)) +
geom_bar(stat = "bin")
ggplot(data = new, aes( x = carrier, y = delay, fill = origin)) +
geom_bar(stat = "identity", position = "dodge")
ggplot(data = new, aes( x = carrier, y = delay)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~origin)
ggplot(data = new, aes( x = origin, y = delay)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~carrier)
ggplot(data = new, aes( x = origin, y = delay)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~carrier) +
theme_bw()
DELAY = 1000
RMD_FILE   =  $(wildcard *.Rmd)
HTML_FILE  = $(patsubst %.Rmd, %.html, $(RMD_FILES))
PDF_FILE   = $(patsubst %.html, %.pdf, $(HTML_FILES))
pdf: $(PDF_FILE)
html: $(HTML_FILE)
all: pdf html
%.pdf: %.html
casperjs makepdf.js $< $@ $(DELAY)
%.html: %.Rmd
cd $(dir $<) && Rscript -e "slidify::slidify('index.Rmd')" && cd ..
detach("package:plyr", unload=TRUE)
?select
?dplyr::select
?select
?dplyr::select #?select
count(flights, dest)
count(flights, carrier)
?mutate_each
by_species <- iris %>% group_by(Species)
by_species
by_species %>% summarise_each(funs(mean))
mutate(flights,
gain = arr_delay - dep_delay,
speed = distance / air_time * 60)
?group_by
group_by(fligths, carrier)
mutate(flights,
gain = arr_delay - dep_delay,
speed = distance / air_time * 60)
transmutate(flights,
gain = arr_delay - dep_delay,
speed = distance / air_time * 60)
mutate(flights,
gain = arr_delay - dep_delay,
speed = distance / air_time * 60)
transmute(flights,
gain = arr_delay - dep_delay,
speed = distance / air_time * 60)
?count
group_by(fligths, carrier)
group_by(flights, carrier)
rm(fligths)
ggplot(data = flights, aes(x = dep_delay, y = arr_delay)) +
geom_point()
flights <- tbl_df(read.csv("flights.csv", stringsAsFactors = FALSE))
ggplot(data = flights, aes(x = dep_delay, y = arr_delay)) +
geom_point()
weather <- tbl_df(read.csv("weather.csv", na.strings = FALSE))
weather
weather
ggplot(data = weather, aes(x = Pressure9am, y = Temp9am)) +
geom_point()
ggplot(data = weather, aes(x = Temp9am, y = Pressure9am)) +
geom_point()
weather <- tbl_df(read.csv("weather.csv", na.strings = FALSE))
ggplot(data = weather, aes(x = Temp9am, y = Pressure9am)) +
geom_point()
ggplot(data = weather, aes(x = Temp9am, y = Pressure9am)) +
geom_point()
ggplot(data = weather, aes(x = Temp9am, y = Pressure9am)) +
geom_point()
# Chunk 1
flights <- tbl_df(read.csv("flights.csv", stringsAsFactors = FALSE))
flights
# Chunk 2
glimpse(flights)
# Chunk 3
filter(flights, carrier == "UA")
# Chunk 4
# How to get help
?dplyr::select #?select
# Chunk 5
select(flights, starts_with("d"))
# Chunk 6
count(flights, carrier)
# Chunk 7
mutate(flights,
gain = arr_delay - dep_delay,
speed = distance / air_time * 60)
# Chunk 8
group_by(flights, carrier)
# Chunk 9
flights %>%
filter(month == 2, day == 1)
# Chunk 10
flights %>%
filter(month == 1 | month == 2)
# Chunk 11
flights %>%
arrange(arr_delay)
# Chunk 12
flights %>%
group_by(carrier) %>%
summarise(count = n()) %>%
arrange(count)
# Chunk 13
flights %>%
group_by(carrier) %>%
summarise(dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE))
# Chunk 16
weather <- tbl_df(read.csv("weather.csv", na.strings = FALSE))
weather
ggplot(data = flights, aes(x = dep_delay, y = arr_delay)) +
geom_point()
ggplot(data = flights, aes(x = dep_delay, y = arr_delay)) +
geom_point()
flights <- tbl_df(read.csv("flights.csv", stringsAsFactors = FALSE))
ggplot(data = flights, aes(x = dep_delay, y = arr_delay)) +
geom_point(alpha = 0.1, na.rm = TRUE)
